// RUN: rel_opt.py -p impl-to-iterators %s | filecheck %s

module() {
    %0 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]> = rel_impl.full_table_scan() ["table_name" = "some_name"]
    %1 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]> = rel_impl.aggregate(%0 : !rel_impl.bag<[!rel_impl.schema_element<"id", !rel_impl.int32>]>) ["col_names" = ["id"], "functions" = ["sum"], "by" = []]
}

//      CHECK: func.func() ["sym_name" = "main", "function_type" = !fun<[!iterators.columnar_batch<!tuple<[!i32]>>], []>, "sym_visibility" = "private", "llvm.emit_c_interface"] {
// CHECK-NEXT:   ^{{.*}}(%{{.*}} : !iterators.columnar_batch<!tuple<[!i32]>>):
// CHECK-NEXT:     %{{.*}} : !iterators.stream<!llvm.struct<"", [!i32]>> = iterators.scan_columnar_batch(%{{.*}} : !iterators.columnar_batch<!tuple<[!i32]>>)
// CHECK-NEXT:     %{{.*}} : !iterators.stream<!llvm.struct<"", [!i32]>> = iterators.reduce(%{{.*}} : !iterators.stream<!llvm.struct<"", [!i32]>>) ["reduceFuncRef" = @sum_struct]
// CHECK-NEXT:     iterators.sink(%{{.*}} : !iterators.stream<!llvm.struct<"", [!i32]>>)
// CHECK-NEXT:     func.return()
// CHECK-NEXT:   }
// CHECK-NEXT:   func.func() ["sym_name" = "sum_struct", "function_type" = !fun<[!llvm.struct<"", [!i32]>, !llvm.struct<"", [!i32]>], [!llvm.struct<"", [!i32]>]>, "sym_visibility" = "private"] {
// CHECK-NEXT:   ^{{.*}}(%{{.*}} : !llvm.struct<"", [!i32]>, %{{.*}} : !llvm.struct<"", [!i32]>):
// CHECK-NEXT:     %{{.*}} : !i32 = llvm.extractvalue(%{{.*}} : !llvm.struct<"", [!i32]>) ["position" = [0 : !index]]
// CHECK-NEXT:     %{{.*}} : !i32 = llvm.extractvalue(%{{.*}} : !llvm.struct<"", [!i32]>) ["position" = [0 : !index]]
// CHECK-NEXT:     %{{.*}} : !i32 = arith.addi(%{{.*}} : !i32, %{{.*}} : !i32)
// CHECK-NEXT:     %{{.*}} : !llvm.struct<"", [!i32]> = llvm.insertvalue(%{{.*}} : !llvm.struct<"", [!i32]>, %{{.*}} : !i32) ["position" = [0 : !index]]
// CHECK-NEXT:     func.return(%{{.*}} : !llvm.struct<"", [!i32]>)
// CHECK-NEXT:   }
